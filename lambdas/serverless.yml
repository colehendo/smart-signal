service: smart-signal
provider:
  name: aws
  runtime: python3.8
  stage: prod
  profile: smart-signal-sls
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
package:
  include:
    - src/**
  exclude:
    - README.md
plugins:
  - serverless-python-requirements
  - serverless-step-functions
custom:
  pythonRequirements:
    dockerizePip: true
resources:
  Outputs:
    TriggerPopulate:
      Value:
        Ref: TriggerPopulate
    # TriggerAlgorithms:
    #   Value:
    #     Ref: TriggerAlgorithms
functions:
  btc-populate:
    handler: populate/btc-populate.populate
    timeout: 15
    environment:
      statemachine_arn: ${self:resources.Outputs.TriggerPopulate.Value}
  algorithms:
    handler: algorithms/algorithms.calculate
    timeout: 60
    events:
     - schedule: rate(1 hour)
    # environment:
    #   statemachine_arn: ${self:resources.Outputs.TriggerAlgorithms.Value}
stepFunctions:
  stateMachines:
    triggerPopulateFunc:
      name: TriggerPopulate
      definition:
        Comment: "Invoke populate lambda every second"
        StartAt: ConfigureCount
        States:
          ConfigureCount:
            Type: Pass
            Result:
              index: 0
            ResultPath: "$.iterator"
            Next: Iterator
          Iterator:
            Type: Task
            Resource: arn:aws:lambda:us-east-1:095630622700:function:smart-signal-prod-btc-populate
            ResultPath: "$.iterator"
            Next: IsCountReached
          IsCountReached:
            Type: Choice
            Choices:
            - Variable: "$.iterator.index"
              NumericLessThan: 60
              Next: Iterator
            Default: Done
          Done:
            Type: Pass
            End: true
    # triggerAlgorithmsFunc:
    #   name: TriggerAlgorithms
    #   definition:
    #     Comment: "Invoke algorithm lambda every second"
    #     StartAt: ConfigureCount
    #     States:
    #       ConfigureCount:
    #         Type: Pass
    #         Result:
    #           index: 0
    #         ResultPath: "$.iterator"
    #         Next: Iterator
    #       Iterator:
    #         Type: Task
    #         Resource: arn:aws:lambda:us-east-1:095630622700:function:smart-signal-prod-algorithms
    #         ResultPath: "$.iterator"
    #         Next: IsCountReached
    #       IsCountReached:
    #         Type: Choice
    #         Choices:
    #         - Variable: "$.iterator.index"
    #           NumericLessThan: 60
    #           Next: Iterator
    #         Default: Done
    #       Done:
    #         Type: Pass
    #         End: true